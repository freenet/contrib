<?xml version="1.0" encoding="UTF-8"?>
<project name="Freenet dependencies" default="all" basedir=".">

	<!-- =================================================================== -->
	<!-- Global properties                                                   -->
	<!-- =================================================================== -->

	<!-- user overrides (properties are immutable, so set overrides first) -->
	<property file="override.properties" />
	<property file="build.properties" />
	<property file="source.properties" />
	<condition property="java.class.dirs" value="${java.class.dirs.user}" else="${java.home}/lib">
		<available file="${java.class.dirs.user}" type="dir"/>
	</condition>

	<property name="pkg.base" value=".."/>
	<property name="pkg.contrib" value="freenet-ext"/>
	<property name="main.make" value="build"/>
	<property name="main.src" value="src"/>
	<property name="main.dst" value="dist"/>

	<property name="tmp" value="tmp"/>
	<property name="lib" value="lib"/>

	<property name="version.src" value="freenet/node/ExtVersion.java" />
	<property name="version.make" value="freenet/node/ExtVersion.class" />

	<!-- set version string based on git-describe -->
	<exec executable="git" failifexecutionfails="false"
		errorProperty="git.errror" outputproperty="git.describe" resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=4" />
	</exec>
	<condition property="git.revision" value="${git.describe}" else="@custom@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<!-- =================================================================== -->
	<!-- Miscellaneous                                                       -->
	<!-- =================================================================== -->

	<target name="dist" depends="clean-all, all" description="clean-build everything"/>

	<target name="all" depends="package" description="build everything, incl. docs"/>

	<target name="clean-all" depends="clean, clean-local, clean-lib, clean-libsrc" description="clean all build products and remote source code"/>

	<target name="debug">
		<echoproperties/>
	</target>

	<!-- =================================================================== -->
	<!-- Standard build                                                      -->
	<!-- =================================================================== -->

	<target name="init">
		<mkdir dir="${main.make}"/>
		<mkdir dir="${main.dst}"/>
	</target>

	<target name="build" depends="init">
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- Create the Version file with patched revision number in ${main.make} -->
		<copy file="${main.src}/${version.src}" tofile="${main.make}/${version.src}" overwrite="true" />
		<delete file="${main.make}/${version.make}" quiet="true" />
		<replace file="${main.make}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${main.make}/${version.src}"/>

		<javac srcdir="${main.make}" destdir="${main.make}" debug="on" optimize="on" source="1.5" target="1.5">
			<compilerarg line="${javac.args}"/>
			<include name="${version.src}"/>
		</javac>
	</target>

	<target name="package" depends="build,prepare-local,package-lib" description="build standard binary packages">
		<jar jarfile="${main.dst}/${pkg.contrib}.jar" basedir="${main.make}" includes="**" update="yes" duplicate="fail" level="9">
			<exclude name="${version.src}"/>
		</jar>
		<lib-copy lib="wrapper"/>
		<lib-copy lib="commons-compress"/>
		<lib-copy lib="lzmajio"/>
		<lib-copy lib="mantissa"/>
		<lib-copy lib="bitcollider-core"/>
	</target>

	<target name="clean" description="clean standard build products">
		<delete dir="${main.make}"/>
		<delete dir="${main.dst}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Build local packages                                                -->
	<!-- =================================================================== -->

	<target name="prepare-local" depends="init,package-local">
		<unjar dest="${main.make}" src="${pkg.base}/onion-common/lib/onion-common.jar"/>
		<unjar dest="${main.make}" src="${pkg.base}/onion-fec/lib/onion-fec.jar"/>
		<copy todir="${main.make}"><fileset dir="${pkg.base}/jcpuid/lib" includes="freenet/**" /></copy>
		<copy todir="${main.make}"><fileset dir="${pkg.base}/NativeBigInteger/lib" includes="net/i2p/**" /></copy>
		<copy todir="${main.make}"><fileset dir="${pkg.base}/NativeThread/lib" includes="freenet/**" /></copy>
	</target>

	<target name="package-local" description="build locally maintained packages">
		<ant inheritAll="false" antfile="${pkg.base}/onion-common/build.xml"/>
		<ant inheritAll="false" antfile="${pkg.base}/onion-fec/build.xml"/>
		<!-- TODO build native binaries for the other libs -->
	</target>

	<target name="clean-local">
		<ant inheritAll="false" antfile="${pkg.base}/onion-common/build.xml" target="clean" />
		<ant inheritAll="false" antfile="${pkg.base}/onion-fec/build.xml" target="clean" />
		<!-- TODO clean native binaries for the other libs -->
	</target>

	<!-- =================================================================== -->
	<!-- Build remote packages                                               -->
	<!-- =================================================================== -->

	<target name="package-lib" depends="prepare-libsrc" description="build external packages">
		<lib-sequential lib="wrapper">
			<!-- TODO build native libs -->
			<ant inheritAll="false" antfile="${pkg.base}/wrapper/build.xml" target="jar">
				<property name="bits" value="${sun.arch.data.model}"/>
				<property name="javac.target.version" value="${javac.target.version}"/>
			</ant>
		</lib-sequential>
		<lib-sequential lib="commons-compress">
			<maven basedir="${pkg.base}/commons-compress" goal="package"/>
		</lib-sequential>
		<lib-sequential lib="lzmajio">
			<fail if="${extlib.lzma.suppress}" message="lzmajio requires lzma, but extlib.lzma.suppress is ON."/>
			<copy todir="${pkg.base}/lzmajio">
				<fileset dir="${pkg.base}/lzma/Java"><include name="SevenZip/**"/></fileset>
			</copy>
			<ant inheritAll="false" antfile="${pkg.base}/lzmajio/build.xml" target="jar"/>
		</lib-sequential>
		<lib-sequential lib="mantissa">
			<!-- TODO run tests -->
			<ant inheritAll="false" antfile="${pkg.base}/mantissa/build.xml" target="jar"/>
		</lib-sequential>
		<lib-sequential lib="bitcollider-core">
			<ant inheritAll="false" antfile="${pkg.base}/${pkg.contrib}/generic-build.xml"
			  dir="${pkg.base}/bitcollider-core" target="jar">
				<property name="jar" value="bitcollider-core.jar"/>
			</ant>
		</lib-sequential>
	</target>

	<target name="clean-lib" description="clean build products of external packages">
		<lib-maybe lib="wrapper">
			<!--WORKAROUND bug in wrapper's build.xml-->
			<mkdir dir="${pkg.base}/wrapper/bin"/>
			<mkdir dir="${pkg.base}/wrapper/lib"/>
			<mkdir dir="${pkg.base}/wrapper/test"/>
			<ant inheritAll="false" antfile="${pkg.base}/wrapper/build.xml">
				<property name="bits" value="${sun.arch.data.model}"/>
				<target name="clean"/>
				<target name="total-clean"/>
			</ant>
		</lib-maybe>
		<lib-maybe lib="commons-compress">
			<maven basedir="${pkg.base}/commons-compress" goal="clean"/>
		</lib-maybe>
		<lib-maybe lib="lzmajio">
			<!-- TODO lzmajio doesn't have a "clean" target :/ -->
			<!--<ant inheritAll="false" antfile="${pkg.base}/lzmajio/build.xml" target="clean"/>-->
		</lib-maybe>
		<lib-maybe lib="mantissa">
			<ant inheritAll="false" antfile="${pkg.base}/mantissa/build.xml" target="clean"/>
		</lib-maybe>
		<lib-maybe lib="bitcollider-core">
			<ant inheritAll="false" antfile="${pkg.base}/${pkg.contrib}/generic-build.xml"
			  dir="${pkg.base}/bitcollider-core" target="clean">
				<property name="jar" value="bitcollider-core.jar"/>
			</ant>
		</lib-maybe>
	</target>

	<!-- =================================================================== -->
	<!-- Get remote packages                                                 -->
	<!-- =================================================================== -->

	<target name="get-libsrc">
		<lib-getsrc lib="wrapper"/>
		<lib-getsrc lib="commons-compress"/>
		<lib-getsrc lib="lzma"/>
		<lib-getsrc lib="lzmajio"/>
		<lib-getsrc lib="mantissa"/>
		<lib-getsrc lib="bitcollider-core"/>
	</target>

	<target name="prepare-libsrc" depends="get-libsrc" description="ensure that all remote source code is available">
		<lib-unpacksrc lib="wrapper"/>
		<lib-unpacksrc lib="commons-compress"/>
		<lib-unpacksrc lib="lzma"/>
		<lib-unpacksrc lib="lzmajio"/>
		<lib-unpacksrc lib="mantissa"/>
		<lib-unpacksrc lib="bitcollider-core"/>
	</target>

	<target name="clean-libsrc" description="remove all remote source code">
		<lib-delsrc lib="wrapper"/>
		<lib-delsrc lib="commons-compress"/>
		<lib-delsrc lib="lzma"/>
		<lib-delsrc lib="lzmajio"/>
		<lib-delsrc lib="mantissa"/>
		<lib-delsrc lib="bitcollider-core"/>
	</target>

	<!-- =================================================================== -->
	<!-- ANT dependencies                                                    -->
	<!-- =================================================================== -->

	<!-- required to work with commons-compress -->
	<include file="ant-task-maven.xml"/>

	<!-- required for "lib-getsrc" macro -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath><pathelement location="${java.class.dirs}/ant-contrib.jar"/></classpath>
	</taskdef>

	<macrodef name="lib-report">
		<attribute name="lib" />
		<sequential>
			<if>
				<istrue value="${extlib.@{lib}.suppress}"/>
				<then><echo message="suppress @{lib} is ON"/></then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="lib-sequential">
		<attribute name="lib" />
		<element name="tasks" implicit="true" optional="true" />
		<sequential>
			<if>
				<istrue value="${extlib.@{lib}.suppress}"/>
				<else><tasks/></else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="lib-delsrc">
		<attribute name="lib" />
		<attribute name="dest" default="@{lib}"/>
		<sequential>
			<lib-sequential lib="@{lib}">
				<delete dir="${pkg.base}/@{dest}"/>
			</lib-sequential>
		</sequential>
	</macrodef>

	<macrodef name="lib-copy">
		<attribute name="lib" />
		<sequential>
			<lib-sequential lib="@{lib}">
				<copy tofile="${main.dst}/@{lib}.jar" file="${pkg.base}/@{lib}/${extlib.@{lib}.jar-dst}"/>
			</lib-sequential>
		</sequential>
	</macrodef>

	<macrodef name="lib-maybe">
		<attribute name="lib" />
		<element name="tasks" implicit="true" optional="true" />
		<sequential>
			<lib-sequential lib="@{lib}">
				<if>
					<and>
						<available file="${pkg.base}/@{lib}" type="dir"/>
						<available file="${pkg.base}/@{lib}/${extlib.@{lib}.buildfile}"/>
					</and>
					<then><tasks/></then>
				</if>
			</lib-sequential>
		</sequential>
	</macrodef>

	<macrodef name="lib-unpacksrc">
		<attribute name="lib" />
		<attribute name="dest" default="@{lib}"/>
		<sequential>
			<lib-report lib="@{lib}"/>
			<lib-sequential lib="@{lib}">
				<basename property="extlib.@{lib}.filename" file="${extlib.@{lib}.location}"/>
				<if>
					<available file="${pkg.base}/@{dest}" type="dir"/>
					<else>
						<delete dir="${tmp}"/>
						<mkdir dir="${tmp}"/>
						<untar dest="${tmp}" compression="gzip">
							<fileset dir="${lib}" includes="${extlib.@{lib}.filename}"><filename name="*.tar.gz"/></fileset>
						</untar>
						<untar dest="${tmp}" compression="bzip2">
							<fileset dir="${lib}" includes="${extlib.@{lib}.filename}"><filename name="*.tar.bz2"/></fileset>
						</untar>
						<untar dest="${tmp}">
							<fileset dir="${lib}" includes="${extlib.@{lib}.filename}"><filename name="*.tar"/></fileset>
						</untar>
						<unzip dest="${tmp}">
							<fileset dir="${lib}" includes="${extlib.@{lib}.filename}"><filename name="*.zip"/></fileset>
						</unzip>
						<move file="${tmp}/${extlib.@{lib}.top-dir}" tofile="${pkg.base}/@{dest}"/>
						<delete dir="${tmp}"/>
					</else>
				</if>
			</lib-sequential>
		</sequential>
	</macrodef>

	<macrodef name="lib-getsrc">
		<attribute name="lib" />
		<sequential>
			<lib-sequential lib="@{lib}">
				<basename property="extlib.@{lib}.filename" file="${extlib.@{lib}.location}"/>
				<for list="${extlib.use-mirrors}" param="mirror">
					<sequential>
						<nested-lib-getsrc-from lib="@{lib}" mirror="@{mirror}" />
					</sequential>
				</for>
				<nested-lib-getsrc-from lib="@{lib}" mirror="upstream" location="${extlib.@{lib}.location}" />
				<nested-lib-checksrc lib="@{lib}"/>
				<fail unless="${extlib.@{lib}.available}"
				  message="lib-getsrc: could not get ${extlib.@{lib}.filename} from any of the mirrors, or upstream."/>
			</lib-sequential>
		</sequential>
	</macrodef>

	<macrodef name="nested-lib-checksrc">
		<!-- check if a lib's source code is available.
		  this macro does not have a lib-sequential wrapper, so should only
		  be accessed from inside macros that do have that wrapper -->
		<attribute name="lib" />
		<sequential>
			<condition property="extlib.@{lib}.available">
				<and>
					<available file="${lib}/${extlib.@{lib}.filename}"/>
					<checksum file="${lib}/${extlib.@{lib}.filename}" algorithm="SHA-256"
					  property="${extlib.@{lib}.sum-sha256}" />
				</and>
			</condition>
		</sequential>
	</macrodef>

	<macrodef name="nested-lib-getsrc-from">
		<!-- get a lib's source code from a given location and mirror.
		  this macro does not have a lib-sequential wrapper, so should only
		  be accessed from inside macros that do have that wrapper -->
		<attribute name="lib" />
		<attribute name="mirror" />
		<attribute name="location" default="${extlib.mirror.@{mirror}}/${extlib.@{lib}.filename}" />
		<sequential>
			<nested-lib-checksrc lib="@{lib}"/>
			<if>
				<istrue value="${extlib.@{lib}.available}"/>
				<else>
					<delete dir="${tmp}"/>
					<mkdir dir="${tmp}"/>
					<get src="@{location}" dest="${tmp}/${extlib.@{lib}.filename}"
					  verbose="true" usetimestamp="true" ignoreerrors="true"/>
					<condition property="extlib.@{lib}.available.@{mirror}">
						<and>
							<available file="${tmp}/${extlib.@{lib}.filename}"/>
							<checksum file="${tmp}/${extlib.@{lib}.filename}" algorithm="SHA-256"
							  property="${extlib.@{lib}.sum-sha256}"/>
						</and>
					</condition>
					<if>
						<istrue value="${extlib.@{lib}.available.@{mirror}}"/>
						<then><move file="${tmp}/${extlib.@{lib}.filename}" todir="${lib}"/></then>
						<else><echo message="failed checksum: @{location}"/></else>
					</if>
					<delete dir="${tmp}"/>
				</else>
			</if>
		</sequential>
	</macrodef>

</project>
